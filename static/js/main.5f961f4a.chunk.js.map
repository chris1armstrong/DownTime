{"version":3,"sources":["CalcCards.js","App.js","index.js"],"names":["sizeConversion","timeConversion","speedConversion","CalcCards","props","getRemainingSize","state","totalSize","currentSize","getPercentRemaining","getPercentDone","toFixed","totalSizeUnitsChange","value","a","async","updateVal","totalSizeUnits","setState","totalSizeChange","currentSizeUnitsChange","currentSizeUnits","currentSizeChange","getRemaining","size","order","getRemainingTime","time","speed","hours","Math","floor","speedChange","speedUnits","speedUnitsChange","percentChange","percentage","percent","getTimeToReach","current","total","signage","minutes","seconds","ceil","timeUnitsChange","timeUnits","potentialDownload","units","timeSize","bytes","end","className","title","Group","compact","min","defaultValue","onChange","this","Option","style","marginRight","marginLeft","max","Component","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5f961f4a.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, InputNumber, Input, Select, Statistic } from 'antd';\nimport './CalcCards.css';\n\nconst sizeConversion = {\"GB\":1000000000,\"MB\":1000000,\"KB\":1000}; //to Bytes\nconst timeConversion = {\"hrs\":3600,\"mins\":60,\"secs\":1}; //to seconds\nconst speedConversion = {\"KB/s\":1000,\"MB/s\":1000000}; //to Bytes/s\n\nclass CalcCards extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      totalSize: 0,           //Bytes\n      totalSizeUnits: \"GB\",   //Current units\n      currentSize: 0,         //Bytes\n      currentSizeUnits: \"GB\", //Current units\n      speed: 0,               //B/s\n      speedUnits: \"KB/s\",     //Current units\n      percent: 50,            //[0-100]\n      time: 0,                //Seconds\n      timeUnits: \"hrs\",       //Current units\n      end: \"N/A\",             //Bytes\n    };\n  }\n\ngetRemainingSize = () => {\n  return this.state.totalSize-this.state.currentSize;\n}\n\ngetPercentRemaining = () => {\n  return 100 - this.getPercentDone();\n}\n\ngetPercentDone = () => {\n  return ((this.state.currentSize/this.state.totalSize)*100).toFixed(2);\n}\n\ntotalSizeUnitsChange = async (value) => {\n  let updateVal = this.state.totalSize/sizeConversion[this.state.totalSizeUnits];\n  await this.setState({\n    totalSizeUnits: value,\n    totalSize: updateVal*sizeConversion[value]\n  });\n}\n\ntotalSizeChange = async (value) => {\n  await this.setState({\n    totalSize: value*sizeConversion[this.state.totalSizeUnits]\n  });\n}\n\ncurrentSizeUnitsChange = async (value) => {\n  let updateVal = this.state.currentSize/sizeConversion[this.state.currentSizeUnits];\n  await this.setState({\n    currentSizeUnits: value,\n    currentSize: updateVal*sizeConversion[value],\n  });\n}\n\ncurrentSizeChange = async (value) => {\n  let updateVal = value*sizeConversion[this.state.currentSizeUnits];\n  await this.setState({\n    currentSize: updateVal,\n  });\n}\n\ngetRemaining = () => {\n  let size = this.getRemainingSize();\n  let order = \"B\";\n  if (size > sizeConversion[\"GB\"]) {\n    size = size/sizeConversion[\"GB\"];\n    order = \"GB\";\n  } else if (size > sizeConversion[\"MB\"]) {\n    size = size/sizeConversion[\"MB\"];\n    order = \"MB\";\n  } else if (size > sizeConversion[\"KB\"]) {\n    size = size/sizeConversion[\"KB\"];\n    order = \"KB\";\n  }\n  return size.toFixed(2) + order + \" \" + this.getPercentRemaining().toFixed(2) + \"%\";\n}\n\ngetRemainingTime = () => {\n  let time = this.getRemainingSize()/this.state.speed; //Seconds remaining at current speed\n  let hours = Math.floor(time/timeConversion[\"hrs\"]);\n  time = time%timeConversion[\"hrs\"];\n  let minutes = Math.floor(time/timeConversion[\"mins\"]);\n  let seconds = (time%timeConversion[\"mins\"]).toFixed(0);\n  return hours + \"hrs \" + minutes + \"mins \" + seconds + \"secs\";\n}\n\nspeedChange = async (value) => {\n  await this.setState({\n    speed: value*speedConversion[this.state.speedUnits]\n  });\n}\n\nspeedUnitsChange = async (value) => {\n  let updateVal = (this.state.speed/speedConversion[this.state.speedUnits])*speedConversion[value];\n  await this.setState({\n    speedUnits: value,\n    speed: updateVal\n  });\n}\n\npercentChange = (percentage) => {\n  this.setState({\n    percent: percentage,\n  });\n}\n\ngetTimeToReach = () => {\n  let current = this.state.currentSize;\n  let total = this.state.totalSize;\n  let speed = this.state.speed;\n  let percentage = this.state.percent;\n  let time = (total*percentage/100-current)/speed; //Seconds remaining at current speed\n  let signage = true;\n  if (time < 0) {signage = false}\n  let hours = 0;\n  let minutes = 0;\n  let seconds = 0;\n  if (signage) {\n    hours = Math.floor(time/timeConversion[\"hrs\"]);\n    time = time%timeConversion[\"hrs\"];\n    minutes = Math.floor(time/timeConversion[\"mins\"]);\n    seconds = (time%timeConversion[\"mins\"]).toFixed(0);\n  } else {\n    hours = Math.ceil(time/timeConversion[\"hrs\"]);\n    time = time%timeConversion[\"hrs\"];\n    minutes = Math.ceil(time/timeConversion[\"mins\"]);\n    seconds = (time%timeConversion[\"mins\"]).toFixed(0);\n  }\n  return hours + \"hrs \" + minutes + \"mins \" + seconds + \"secs\";\n}\n\ntimeUnitsChange = (value) => {\n  this.setState({\n    timeUnits: value\n  });\n}\n\npotentialDownload = () => {\n  let units = this.state.timeUnits;\n  let time = this.state.timeSize;\n  let seconds = time*timeConversion[units];\n  let speed = this.state.speed;\n  let bytes = speed*seconds;\n  let order = \"B\";\n  if (bytes > sizeConversion[\"GB\"]) {\n    bytes = bytes/sizeConversion[\"GB\"];\n    order = \"GB\";\n  } else if (bytes > sizeConversion[\"MB\"]) {\n    bytes = bytes/sizeConversion[\"MB\"];\n    order = \"MB\";\n  } else if (bytes > sizeConversion[\"KB\"]) {\n    bytes = bytes/sizeConversion[\"KB\"];\n    order = \"KB\";\n  }\n  return bytes.toFixed(2) + order;\n}\n\nrender() {\n  return (\n    <div className=\"centering\">\n      <div className=\"smallContainer\">\n        <Card title=\"Download size\" size=\"small\">\n          <Input.Group compact>\n            <InputNumber min={0} defaultValue={0} onChange={this.totalSizeChange}/>\n            <Select defaultValue={this.state.totalSizeUnits} onChange={this.totalSizeUnitsChange}>\n              <Select.Option value=\"KB\">KB</Select.Option>\n              <Select.Option value=\"MB\">MB</Select.Option>\n              <Select.Option value=\"GB\">GB</Select.Option>\n            </Select>\n          </Input.Group>\n        </Card>\n        <Card title=\"Currently downloaded/Percent\" size=\"small\">\n          <Input.Group compact>\n            <InputNumber min={0} defaultValue={0} onChange={this.currentSizeChange}/>\n            <Select defaultValue={this.state.currentSizeUnits} onChange={this.currentSizeUnitsChange}>\n              <Select.Option value=\"KB\">KB</Select.Option>\n              <Select.Option value=\"MB\">MB</Select.Option>\n              <Select.Option value=\"GB\">GB</Select.Option>\n            </Select>\n            <div className=\"percentContainer\">\n              {this.getPercentDone()}%\n            </div>\n          </Input.Group>\n        </Card>\n        <Card title=\"Speed\" size=\"small\">\n          <Input.Group compact>\n            <InputNumber min={0} defaultValue={0} onChange={this.speedChange}/>\n            <Select defaultValue={this.state.speedUnits} onChange={this.speedUnitsChange}>\n              <Select.Option value=\"KB/s\">KB/s</Select.Option>\n              <Select.Option value=\"MB/s\">MB/s</Select.Option>\n            </Select>\n          </Input.Group>\n        </Card>\n      </div>\n      <div className=\"smallContainer\">\n        <Card size=\"small\">\n          <Statistic\n            title=\"Remaining/Percent\"\n            value={this.getRemaining()}\n          />\n        </Card>\n        <Card size=\"small\">\n          <Statistic\n            title=\"Time to finish\"\n            value={this.getRemainingTime()}\n          />\n        </Card>\n        <Card size=\"small\">\n          <Statistic\n            title={(\n              <div>\n                Time to reach\n                <InputNumber style={{marginRight:'2px',marginLeft:'2px'}} defaultValue={50} min={0} max={100} onChange={this.percentChange}/>\n                %\n              </div>)}\n            value={this.getTimeToReach()}\n          />\n        </Card>\n      </div>\n      <div className=\"footContainer\">\n        <Card>\n          In the next \n          <Input.Group compact>\n            <InputNumber min={0} defaultValue={0} onChange={(value) => {this.setState({timeSize:value})}}/>\n            <Select defaultValue={this.state.timeUnits} onChange={this.timeUnitsChange}>\n              <Select.Option value=\"hrs\">hrs</Select.Option>\n              <Select.Option value=\"mins\">mins</Select.Option>\n              <Select.Option value=\"secs\">secs</Select.Option>\n            </Select>\n          </Input.Group> \n          I can download\n          <br/>\n          {this.potentialDownload()}\n        </Card>\n      </div>\n    </div>\n    )\n  }\n}\n\nexport default CalcCards;\n","import React from 'react';\nimport CalcCards from './CalcCards';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <CalcCards/>\n    </div>\n  );\n}\n\nexport default App;\n","import App from './App';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'antd/dist/antd.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}